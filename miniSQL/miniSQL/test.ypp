%{
    
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    #include <time.h>
    #include "sqlcommand.h"
    #include "base.h"
    #include "API.h"
    #include "CatalogManager.h"
    #include <unistd.h>
    
    //#include "recordmanager.h"
    extern "C"{
        void yyerror(const char *s);
        extern int yylex(void);
        extern int yylineno;
        extern char* yytext;
        extern FILE* yyin;
    }
    sqlcommand sql;
    bool checkLexeme(std::string s);
    std::string attrn[32];
    int attrp[32];//0:ordinary 1:primary 2:unique
    int attrt[32];//0:int 1:char 2:float
    int attrcount=0;
    std::string tablen,indexn,attrname;
    void prompt();
    void reset();
    void execute(std::string s);
    void attrExist(std::string s);
    void printRecordInfo(std::string s, Recordinfo r,bool f);
    bool checkPrimary(std::string s);
    bool exists(std::string s1,std::string s2,std::string s3="");
    std::string primaryAttr;
    std::string pk;
    clock_t t1,t2;
    int fileflag=0;
    
    CatalogManager *catalogmanager;
    RecordManager *recordmanager;
    IndexManager *indexmanager;
    BufferManager *buffermanager;
    API *api;
    
    %}

%union {char *strVal;char *id;int intVal;float flVal;char *condition;}
%token UNIQUE TABLE SELECT INSERT DROP DELETE INDEX QUIT EXECFILE FROM WHERE CREATE RESET
%token INTO VALUES ON PRIMARY KEY INT CHAR FLOAT ANND
%token UNEXPECTED WHITESPACE FEOF ERR
%token <strVal> STRING FILENAME
%token <id> identifier
%token <intVal> intnum
%token <flVal> fnum
%left ANND
%left LE GE NE '>' '<'
%right '='
%left '+' '-' '*' '/'
%type <condition> where_clause condition
%type <strVal> operation value
%type <flVal> number
%type <id> priattr attrn attrname tablename indexname selectattr



%%




line	: create_table ';'	{
       //     printf("create");
    if(!fileflag) t1=clock();
    if(checkLexeme("createtable")){
     //   printf("checked");
        execute("createtable");
    }
    if(!fileflag) t2=clock();
    if(!fileflag)     printf("Time elapsed: %f seconds\n", ((double)t2-(double)t1)/CLOCKS_PER_SEC);
    reset();
}
| create_index	';'	{
    if(!fileflag) t1=clock();
    if(checkLexeme("createindex")){
        execute("createindex");
    }
    if(!fileflag) t2=clock();
    if(!fileflag)     printf("Time elapsed: %f seconds\n", ((double)t2-(double)t1)/CLOCKS_PER_SEC);
    reset();
}
| select_statement ';'	{
    if(!fileflag) t1=clock();
    if(checkLexeme("select")){
        execute("select");
    }
    if(!fileflag) t2=clock();
    if(!fileflag)     printf("Time elapsed: %f seconds\n", ((double)t2-(double)t1)/CLOCKS_PER_SEC);
    
    reset();
}
| delete_statement ';'	{
    if(!fileflag) t1=clock();
    if(checkLexeme("delete")){
        execute("delete");
    }
    if(!fileflag) t2=clock();
    if(!fileflag)     printf("Time elapsed: %f seconds\n", ((double)t2-(double)t1)/CLOCKS_PER_SEC);
    
    reset();
}
| drop_table ';'	{
    if(!fileflag) t1=clock();
    if(checkLexeme("droptable")){
        execute("droptable");
    }
    if(!fileflag) t2=clock();
    if(!fileflag)     printf("Time elapsed: %f seconds\n", ((double)t2-(double)t1)/CLOCKS_PER_SEC);
    reset();
}
| drop_index ';'	{
    if(!fileflag) t1=clock();
    if(checkLexeme("dropindex")){
        execute("dropindex");
    }
    if(!fileflag) t2=clock();
    if(!fileflag)     printf("Time elapsed: %f seconds\n", ((double)t2-(double)t1)/CLOCKS_PER_SEC);
    reset();
}
| insert_statement ';' {
    if(!fileflag) t1=clock();
    if(checkLexeme("insert")){
        execute("insert");
    }
    if(!fileflag) t2=clock();
    if(!fileflag)     printf("Time elapsed: %f seconds\n", ((double)t2-(double)t1)/CLOCKS_PER_SEC);
    reset();
}
| EXECFILE STRING ';' {
    const char* path=$2;
    char temp[2*256];
    getcwd(temp, 2*256);
    std::string s;
    for(int i=0; temp[i]!='\0'; i++) s+=temp[i];
    s+='/';
    char file[50];
    strcpy(file,s.c_str());
    strcat(file,path);
    FILE *fp=fopen(file,"r");
    if(fp==NULL)	printf("Cannot open file %s\n", $2);
    else    { fileflag=1;t1=clock();yyin=fp;}
}
| QUIT ';'	{
    printf("Bye~\n");
    //delete api;
   // delete indexmanager;
  //  delete catalogmanager;
   // delete recordmanager;
   // delete buffermanager;
    exit(EXIT_SUCCESS);
}

| line QUIT ';'	{
    printf("Bye~\n");
   // delete api;
 //   delete indexmanager;
   // delete catalogmanager;
    //delete recordmanager;
    //delete buffermanager;
    exit(EXIT_SUCCESS);
}
| line create_table ';'	{
    if(!fileflag) t1=clock();
    if(checkLexeme("createtable")){
        execute("createtable");
    }
    if(!fileflag) t2=clock();
    if(!fileflag)     printf("Time elapsed: %f seconds\n", ((double)t2-(double)t1)/CLOCKS_PER_SEC);
    
    reset();
}
| line create_index ';' {
    if(!fileflag) t1=clock();
    if(checkLexeme("createindex")){
        execute("createindex");
    }
    if(!fileflag) t2=clock();
    if(!fileflag)     printf("Time elapsed: %f seconds\n", ((double)t2-(double)t1)/CLOCKS_PER_SEC);
    
    reset();
}
| line select_statement ';' {
    if(!fileflag) t1=clock();
    if(checkLexeme("select")){
        execute("select");
    }
    if(!fileflag) t2=clock();
    if(!fileflag)     printf("Time elapsed: %f seconds\n", ((double)t2-(double)t1)/CLOCKS_PER_SEC);
    
    reset();
}
| line delete_statement ';'	{
    if(!fileflag) t1=clock();
    if(checkLexeme("delete")){
        execute("delete");
    }
    if(!fileflag) t2=clock();
    if(!fileflag)     printf("Time elapsed: %f seconds\n", ((double)t2-(double)t1)/CLOCKS_PER_SEC);
    
    reset();
}
| line insert_statement ';' {
    if(!fileflag) t1=clock();
    if(checkLexeme("insert")){
        execute("insert");
    }
    if(!fileflag) t2=clock();
    if(!fileflag)    printf("Time elapsed: %f seconds\n", ((double)t2-(double)t1)/CLOCKS_PER_SEC);
    
    reset();
}
| line drop_table ';' {
    if(!fileflag) t1=clock();
    if(checkLexeme("droptable")){
        execute("droptable");
    }
    if(!fileflag) t2=clock();
    if(!fileflag)     printf("Time elapsed: %f seconds\n", ((double)t2-(double)t1)/CLOCKS_PER_SEC);
    
    reset();
}
| line drop_index ';' {
    if(!fileflag) t1=clock();
    if(checkLexeme("dropindex")){
        execute("dropindex");
    }
    if(!fileflag) t2=clock();
    if(!fileflag)    printf("Time elapsed: %f seconds\n", ((double)t2-(double)t1)/CLOCKS_PER_SEC);
    
    reset();
}
| line EXECFILE STRING ';' {
    const char* path=$3;
    char temp[2*256];
    getcwd(temp, 2*256);
    std::string s;
    for(int i=0; temp[i]!='\0'; i++) s+=temp[i];
    s+='/';
    char file[50];
    strcpy(file,s.c_str());
    strcat(file,path);
    FILE *fp=fopen(file,"r");
    if(fp==NULL)	printf("Cannot open file %s\n", $3);
    else
    { fileflag=1;t1=clock();yyin=fp;}
    yyparse();
}
;


create_index	: CREATE INDEX indexname ON tablename '(' attrname ')'
;

insert_statement	: INSERT INTO tablename VALUES '(' valuelist ')'
;

valuelist	: value {sql.setcolValue($1);}
| valuelist ',' value {sql.setcolValue($3);}
;

value : STRING {if(attrcount>31) {printf("Too many values!");yyparse();}
    else {attrt[attrcount++]=1;$$=$1;}}
| intnum {attrt[attrcount++]=0;char s[30];sprintf(s, "%d", $1);$$=s;}
| fnum {attrt[attrcount++]=-1;char s[30];sprintf(s, "%f", $1);$$=s;}
;
select_statement	: SELECT '*' FROM tablename where_clause	{sql.setSelectInfo("*");}
| SELECT attrs FROM tablename where_clause	{;}
;
attrs : selectattr
| attrs ',' selectattr
;
selectattr	: identifier	{sql.setSelectInfo($1);}
delete_statement	: DELETE FROM tablename where_clause	{;}
|DELETE attrs FROM tablename where_clause	{;}
;
where_clause	: WHERE condition	{;}
|/* empty */ {;}
;

condition	: attrname operation number
{
    char s[30];
    sprintf(s, "%f", $3);
    sql.setconditions(attrname,$2,std::string(s));
}
| attrname operation STRING
{
    std::string s=$3;
    sql.setconditions(attrname,$2,s);
}
| condition ANND condition	{;}
;
operation	: GE	{strcpy($$,">=");}
| LE	{strcpy($$,"<=");}
| NE	{strcpy($$,"<>");}
| '<'	{strcpy($$,"<");}
| '>'	{strcpy($$,">");}
| '='	{strcpy($$,"=");}
;
number	: intnum {$$=$1;}
| fnum {$$=$1;}
;
tablename	: identifier	{tablen=$1;sql.tablename=tablen;}
;

create_table	: CREATE TABLE tablename '(' table_element_list ',' table_constraint ')'
| CREATE TABLE tablename '(' table_element_list ')' {printf("creating...");}
;

table_element_list	: table_element
| table_element_list ',' table_element
;
table_element	: column_def
;
column_def	: attrn data_type
| attrn data_type column_constraint
;
attrn 	: identifier	{
    if(attrcount<32) attrn[attrcount++]=$1;
    else {yyerror("Too many attributes!");
        yyparse();}
}
attrname	: identifier	{attrname=$1 ;}
;
data_type	: INT	{attrt[attrcount-1]=0;}
| CHAR '(' intnum ')'	{
    if($3>255||$3<1) {yyerror("Char is defined too long or too short!");yyparse();}
    else attrt[attrcount-1]=$3;
}
| FLOAT	{attrt[attrcount-1]=-1;}
;
table_constraint	: PRIMARY KEY '(' priattr ')'	{}
;
priattr	: identifier	{primaryAttr=$1;}
;
column_constraint	: UNIQUE	{attrp[attrcount-1]=2;}
;



drop_table	: DROP TABLE tablename{;}
;
drop_index	: DROP INDEX indexname{;}
;
indexname	: identifier	{indexn=$1;}
;


%%
void yyerror(const char *s)
{
    char c;
    std::string tmp1,tmp2;
    tmp1=s;
    tmp2=yytext;
    if(strcmp(yytext,";")&&strcmp(s,"Unterminated string")) while((c=yylex())!=';');
    if(strcmp(s,"Char is defined too long or too short!"))
    printf("%s near '%s'\n",s,tmp2.c_str());
    else
    printf("%s\n",s);
    sql.clear();
    reset();
    // printf("yyt=%s",yytext);
    
}
void prompt(){
    printf(">>> ");
}

bool checkLexeme(std::string s){
    if(s=="select"){
        bool f=true;
        if(!catalogmanager->TableExists(sql.getTablen())) {
            printf("Table '%s' doesn't exists!\n",sql.getTablen().c_str());
            return false;
        }
        std::vector<std::vector<std::string> > v=sql.getconditions();
        std::vector<std::vector<std::string> >::iterator iter;
        for(iter = v.begin(); iter != v.end(); iter++)  {
            std::vector<std::string>::iterator it = (*iter).begin();
            if(!catalogmanager->AttrExists(*it,sql.getTablen())) {
                printf("Attribute '%s' doesn't exist!\n",(*it).c_str());
                f=false;
            }
        }
        std::vector<std::string> attr=sql.GetSelectInfo();
        std::vector<std::string>::iterator it;
        if(*attr.begin()!="*"){
            for(it = attr.begin(); it != attr.end(); it++)  {
                if(!catalogmanager->AttrExists(*it,sql.getTablen())) {
                    printf("Attribute '%s' doesn't exist!\n",(*it).c_str());
                    f=false;
                }
            }
        }
        return f;
    }
    if(s=="delete"){
        bool f=true;
        if(!catalogmanager->TableExists(sql.getTablen())) {
            printf("Table '%s' doesn't exists!\n",sql.getTablen().c_str());
            f=false;
        }
        std::vector<std::vector<std::string> > v=sql.getconditions();
        std::vector<std::vector<std::string> >::iterator iter;
        for(iter = v.begin(); iter != v.end(); iter++)  {
            std::vector<std::string>::iterator it = (*iter).begin();
            if(!catalogmanager->AttrExists(*it,sql.getTablen())) {
                printf("Attribute '%s' doesn't exist!\n",(*it).c_str());
                f=false;
            }
        }
        return f;
    }
    if(s=="insert"){
        bool f=true;
        if(!catalogmanager->TableExists(sql.getTablen())) {
            printf("Table '%s' doesn't exist!\n",tablen.c_str());
            return false;
        }
        int c=catalogmanager->AttrCount(tablen);
        if(attrcount!=c) {
            printf("Attribute number doesn't fit!\n");
            f=false;
        }
        for(int i=0;i<c;i++){
            int tm=attrt[i];
            if(tm>0) tm=1;
            if(tm!=catalogmanager->getAttrType(tablen,i)&&!(tm==0&&catalogmanager->getAllAttrType(tablen)[i]==-1))
            {
                printf("Attribute type doesn't fit!\n");
                f=false;
            }
        }
        return f;
    }
    if(s=="createtable"){
        bool f=true;
        if(catalogmanager->TableExists(tablen)) {
            printf("Table '%s' already exists!\n",tablen.c_str());
            f=false;
        }
        if(tablen.length()>64) {
            printf("Table name '%s' is too long!\n",tablen.c_str());
            f=false;
        }
        
        for(int i=0;i<attrcount;i++){
            for(int j=i+1;j<attrcount;j++){
                if(attrn[i]==attrn[j]){
                    printf("Duplicate attribute names '%s'!\n",attrn[i].c_str());
                    f=false;
                }
            }
        }
        if(primaryAttr!="")	if(!checkPrimary(primaryAttr)) f=false;
        return f;
    }
    
    if(s=="createindex"){
        bool f=true;
        if(!catalogmanager->TableExists(tablen))	{printf("Table '%s' doesn't exists.\n",tablen.c_str());f=false;}
        if(!catalogmanager->AttrExists(attrname,tablen))	{printf("Attribute '%s' doesn't exists.\n",attrname.c_str());f=false;}
        if(catalogmanager->IndexExists(indexn))	{printf("Index name '%s' already exists.\n",indexn.c_str());f=false;}
        return f;
    }
    
    
    if(s=="droptable"){
        if(!catalogmanager->TableExists(tablen))	{printf("Table '%s' doesn't exists.\n",tablen.c_str());return false;}
        return true;
    }
    if(s=="dropindex"){
        if(!catalogmanager->IndexExists(indexn))	{printf("Index '%s' doesn't exists.\n",indexn.c_str());return false;}
        return true;
    }
    
    return false;
}

void execute(std::string s){
    if(s=="select"){
        sql.sqlType=0;
        sql.tablename=tablen;
        printRecordInfo("Select",api->select(sql),true);
    }
    if(s=="delete"){
        sql.sqlType=1;
        sql.tablename=tablen;
        printRecordInfo("Delete",api->del(sql),false);
    }
    if(s=="insert"){
        sql.sqlType=2;
        sql.tablename=tablen;
        printRecordInfo("Insert",api->insert(sql),false);
    }
    if(s=="createtable"){
        sql.sqlType=3;
        sql.setCreateTableInfo(tablen,attrcount,attrn,attrp,attrt);
        printRecordInfo("Create table",api->createTable(sql),false);
    }
    if(s=="createindex"){
        sql.sqlType=4;
        sql.indexname=indexn;
        sql.setCreateIndexInfo(tablen,attrname);
        printRecordInfo("Create index",api->createIndex(sql),false);
    }
    if(s=="droptable"){
        sql.sqlType=5;
        sql.tablename=tablen;
        printRecordInfo("Drop table",api->dropTable(sql),false);
    }
    if(s=="dropindex"){
        sql.sqlType=6;
        sql.indexname=indexn;
        printRecordInfo("Drop index",api->dropIndex(sql),false);
    }
    
}


bool checkPrimary(std::string s){
    int i;
    for(i = 0;i<attrcount;i++)
    if(attrn[i]==s)	break;
    if(i==attrcount&&attrn[i]!=s)
    {
        printf("Key column '%s' does not exist in table!\n",s.c_str());
        return false;
    }
    attrp[i]=1;
    return true;
}

void printResult(Result res){
    Row row;
    std::vector<Row>::iterator iter;
    int i=0;
    int mm[32]={0};
    for(iter = res.rows.begin(); iter != res.rows.end(); iter++)  {
        i=0;
        for(std::vector<std::string>::iterator it = (*iter).cols.begin(); it != (*iter).cols.end(); it++){
            if((*it).length()>mm[i]) mm[i++]=(*it).length();
        }
    }
    for(iter = res.rows.begin(); iter != res.rows.end(); iter++)  {
        printf("|");
        int m;
        i=0;
        for(std::vector<std::string>::iterator it = (*iter).cols.begin(); it != (*iter).cols.end(); it++)
        {
            m=mm[i];
            printf("%-*s\t",m,(char *)(*it).c_str());
            i++;
        }
        printf("|\n");
    }
}

void printRecordInfo(std::string s,Recordinfo info,bool flag){
    if(info.getSucc()){
        printf("%s succeeded!%s\n",s.c_str(),info.getMessage().c_str());
        if(flag) printResult(info.getRes());
    }
    else{
        printf("%s failed!%s\n",s.c_str(),info.getMessage().c_str());
    }
}
void reset(){
    attrcount=0;
    for(int i = 0;i<32;i++)
    {
        attrn[i]="";
        attrp[i]=0;
        attrt[i]=0;
    }
    primaryAttr="";
    tablen="";
    indexn="";
    attrname="";
    sql.clear();
    pk="";
}
int main()
{
    
    catalogmanager = new CatalogManager();
    recordmanager = new RecordManager();
    indexmanager = new IndexManager();
    buffermanager = new BufferManager();
    api = new API();
    prompt();
    reset();
    while(1){
        yyparse();
    }
    return 0;
}